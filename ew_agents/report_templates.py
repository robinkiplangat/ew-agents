"""
ElectionWatch Agent Report Templates

This module contains standardized JSON templates that agents can use to structure
their analysis reports consistently.
"""

import json
from datetime import datetime
from typing import Dict, Any, List, Optional

class ElectionWatchReportTemplate:
    """
    Standardized templates for ElectionWatch agent reports
    """
    
    @staticmethod
    def get_analysis_template() -> Dict[str, Any]:
        """
        Returns the unified analysis template for all types of election monitoring reports.
        This single template handles comprehensive, quick, multimedia, and trend analysis.
        """
        return {
            "report_metadata": {
                "report_id": "AutoGeneratedReport",
                "analysis_timestamp": datetime.now().isoformat(),
                "report_type": "analysis",
                "content_type": "",  # text, image, video, csv, multimedia
                "analysis_depth": "standard"  # quick, standard, comprehensive
            },
            "narrative_classification": {
                "theme": "",
                "threat_level": "",
                "details": "",
                "confidence_score": 0.0,
                "alternative_themes": [],
                "threat_indicators": []
            },
            "actors": [
                {
                    "name": "",
                    "affiliation": "",
                    "role": "",
                    "influence_level": "",
                    "verification_status": "",
                    "social_metrics": {}
                }
            ],
            "lexicon_terms": [
                {
                    "term": "",
                    "category": "",
                    "context": "",
                    "confidence_score": 0.0,
                    "language": "en",
                    "severity": "",
                    "definition": ""
                }
            ],
            "risk_level": "",
            "date_analyzed": datetime.now().isoformat(),
            "recommendations": [],
            "analysis_insights": {
                "content_statistics": {
                    "word_count": 0,
                    "character_count": 0,
                    "language_detected": "en"
                },
                "threat_assessment": {
                    "overall_risk_score": 0.0,
                    "violence_potential": "",
                    "electoral_impact": "",
                    "social_cohesion_threat": "",
                    "urgency_level": ""
                },
                "processing_metadata": {
                    "agents_utilized": [],
                    "analysis_duration": 0.0,
                    "confidence_level": "medium",
                    "data_sources": []
                }
            }
        }
    
    @staticmethod
    def create_analysis_report(content_type: str = "text", 
                             analysis_depth: str = "standard", 
                             **kwargs) -> Dict[str, Any]:
        """
        Creates an analysis report using the unified template with provided data
        
        Args:
            content_type: Type of content analyzed (text, image, video, csv, multimedia)
            analysis_depth: Depth of analysis (quick, standard, comprehensive)
            **kwargs: Data to populate in the template
        
        Returns:
            Dict containing the populated report structure
        """
        template = ElectionWatchReportTemplate.get_analysis_template()
        
        # Set content type and analysis depth
        template["report_metadata"]["content_type"] = content_type
        template["report_metadata"]["analysis_depth"] = analysis_depth
        
        # Update template with provided data
        def update_nested_dict(d: Dict, updates: Dict):
            for key, value in updates.items():
                if key in d:
                    if isinstance(d[key], dict) and isinstance(value, dict):
                        update_nested_dict(d[key], value)
                    else:
                        d[key] = value
        
        update_nested_dict(template, kwargs)
        return template
    
    @staticmethod
    def validate_analysis_report(report: Dict[str, Any]) -> Dict[str, Any]:
        """
        Validates if a report follows the expected structure
        
        Args:
            report: The report to validate
        
        Returns:
            Dict with validation results
        """
        try:
            template = ElectionWatchReportTemplate.get_analysis_template()
            required_keys = set(template.keys())
            report_keys = set(report.keys())
            
            missing_keys = required_keys - report_keys
            extra_keys = report_keys - required_keys
            
            return {
                "valid": len(missing_keys) == 0,
                "missing_keys": list(missing_keys),
                "extra_keys": list(extra_keys),
                "compliance_score": len(report_keys & required_keys) / len(required_keys)
            }
        except Exception as e:
            return {
                "valid": False,
                "error": str(e),
                "compliance_score": 0.0
            }
    
    @staticmethod
    def export_analysis_report(report_data: Dict[str, Any], filename: Optional[str] = None) -> Dict[str, Any]:
        """
        Exports an analysis report as a JSON file
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"electionwatch_analysis_{timestamp}.json"
        
        try:
            import os
            output_dir = os.path.join(os.path.dirname(__file__), "..", "data", "outputs")
            os.makedirs(output_dir, exist_ok=True)
            
            filepath = os.path.join(output_dir, filename)
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            return {
                "status": "success",
                "filename": filename,
                "filepath": filepath,
                "message": f"Analysis report exported successfully to {filename}"
            }
        except Exception as e:
            return {
                "status": "error",
                "message": f"Failed to export report: {str(e)}"
            }

# Utility functions for backwards compatibility and easy access
def get_analysis_template() -> Dict[str, Any]:
    """Get the unified analysis template"""
    return ElectionWatchReportTemplate.get_analysis_template()

def create_analysis_report(content_type: str = "text", analysis_depth: str = "standard", **kwargs) -> Dict[str, Any]:
    """Create analysis report with provided data"""
    return ElectionWatchReportTemplate.create_analysis_report(content_type, analysis_depth, **kwargs)

def export_analysis_report(report_data: Dict[str, Any], filename: Optional[str] = None) -> Dict[str, Any]:
    """Export analysis report as JSON file"""
    return ElectionWatchReportTemplate.export_analysis_report(report_data, filename)

# Template instruction for agents
AGENT_TEMPLATE_INSTRUCTION = """
When generating analysis reports, use the unified ElectionWatchReportTemplate.get_analysis_template() 
to ensure consistent structure across all analysis types.

The template automatically adapts to different content types:
- Text analysis (social media posts, articles)
- Image analysis (screenshots, memes, infographics) 
- Video analysis (deepfakes, propaganda videos)
- CSV analysis (datasets, social media exports)
- Multimedia analysis (combined content types)

Always populate the following key fields:
- report_metadata (with content_type and analysis_depth)
- narrative_classification (with theme, threat_level, details)
- actors (with name, role, affiliation)
- lexicon_terms (with detected terms and categories)
- risk_level (overall assessment)
- recommendations (actionable items)
- analysis_insights (detailed technical information)

Use create_analysis_report() method to populate templates with your analysis data.
Export final reports using export_analysis_report() for persistent storage.
"""

# Create FunctionTool instances for coordinator use
from google.adk.tools import FunctionTool

get_analysis_template_tool = FunctionTool(
    func=get_analysis_template
)

export_analysis_report_tool = FunctionTool(
    func=export_analysis_report
)

# Aliases for agent.py compatibility
generate_analysis_template_tool = get_analysis_template_tool
generate_report_template_tool = export_analysis_report_tool 